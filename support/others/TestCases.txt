This project is based on Fake Store API and it contemplates the following test cases.

Document structure:

/ENDPOINT (amount of tests in the endpoint) - file_name.robot

** REQUEST TYPE **
TC00: Test Label -- (Test Case Tag)

---------------------------------------------------------------

/PRODUCTS (37 tests) products_tests.robot

** GET **
DONE - C01: List the details of all products  -- (GET200.1)
DONE - TC02: List the details of only one product -- (GET200.2)
DONE - TC03: List a non-existent product -- (GET404.1)
DONE - TC04: List the details of a limited quantity of products -- (GET200.3)
DONE - TC05: List the details of an out of range quantity of products -- (GET404.2) 
DONE - TC06: List all products sorted (decreasing ID) -- (GET200.4)
DONE - TC07: Pass an invalid parameter for "sort" -- (GET400.1)
DONE - TC08: List all categories of products -- (GET200.5)
DONE - TC09: List all products of a specific category -- (GET200.6)
DONE - TC10: List all products of a non-existent category -- (GET400.2)

** POST **
DONE - TC11: Add a new product -- (POST201)
DONE - TC12: Add a new product with a title that already exists -- (POST400.1)
DONE - TC13: Add a empty product -- (POST400.2)
DONE - TC14: Add a product with an empty title -- (POST400.3)
DONE - TC15: Add a product with an empty price -- (POST400.4)
DONE - TC16: Add a product with an empty description -- (POST400.5)
DONE - TC17: Add a product with an empty image -- (POST400.6)
DONE - TC18: Add a product with an empty category -- (POST400.7)

** PUT **
DONE - TC19: Update a product using PUT request -- (PUT200)
DONE - TC20: Add a new product using PUT request -- (PUT201)
DONE -  TC21: Update a product without passing the id in the endpoint using PUT request -- (PUT404)
DONE - TC22: Update a product with a title that already exists using PUT request -- (PUT400.1)
DONE - TC23: Update a product to an empty product using PUT request -- (PUT400.2)
DONE - TC24: Update a product with an empty title using PUT request -- (PUT400.3)
DONE - TC25: Update a product with an empty price using PUT request -- (PUT400.4)
DONE - TC26: Update a product with an empty description using PUT request -- (PUT400.5)
DONE - TC27: Update a product with an empty image using PUT request -- (PUT400.6)
DONE - TC28: Update a product with an empty category using PUT request -- (PUT400.7)

** PATCH **
DONE - TC29: Update a product using PATCH request -- (PATCH200)
DONE - TC30: Add a new product using PATCH request -- (PATCH201)
DONE - TC31: Update a product without passing the id in the endpoint using PATCH request -- (PATCH404)
DONE - TC32: Update a product with a title that already exists using PATCH request -- (PATCH400.1)
DONE - TC33: Update a product to an empty product using PATCH request -- (PATCH400.2)
DONE - TC34: Update a product with an empty title using PATCH request -- (PATCH400.3)
DONE - TC35: Update a product with an empty price using PATCH request -- (PATCH400.4)
DONE - TC36: Update a product with an empty description using PATCH request -- (PATCH400.5)
DONE - TC37: Update a product with an empty image using PATCH request -- (PATCH400.6)
DONE - TC38: Update a product with an empty category using PATCH request -- (PATCH400.7)

** DELETE **
DONE - TC39: Delete a product -- (DELETE200)
DONE - TC40: Delete a non-existent product -- (DELETE404)

/CART (42 tests) carts_tests.robot

** GET **
DONE - TC41: List the details of all carts -- (GET200.1)
DONE - TC42: List the details of a specific cart -- (GET200.2)
DONE - TC43: List a non-existent cart -- (GET404.1)
DONE - TC44: List the details of a limited quantity of carts -- (GET200.3)
DONE - TC45: List the details of an out of range quantity of carts -- (GET404.2)
DONE - TC46: List all carts sorted (decreasing ID) -- (GET200.4)
DONE - TC47: Pass an invalid parameter for "sort" -- (GET400.1)
DONE - TC48: List all carts created in a certain date range -- (GET200.5)
DONE - List all carts created since a certain date -- (GET200.6)
DONE - List all cart created until a certain date -- (GET200.7)
DONE - TC49: List all carts created in a future date -- (GET400.2)
DONE - TC50: List all carts created in a very old date -- (GET400.3)
DONE - TC50: List the carts of a user that has carts -- (GET200.6)
DONE - TC51: List the carts of a user that doesn't have carts -- (GET404.3)
DONE - TC52: List the carts of a non-existent user -- (GET404.4)

** POST **
DONE - TC53: Add a product to a cart -- (POST201)
DONE - TC55: Add a product to a cart of a non-existent user -- (POST404.1)
DONE - Post a cart to a user that already has a cart --
DONE - TC56: Add a product to a cart with an empty userId -- (POST400.2)
DONE - TC57: Add a product to a cart with an invalid date -- (POST400.3)
DONE - TC58: Add a product to a cart with an empty date -- (POST400.4)
DONE - TC59: Add an empty product to a cart -- (POST400.5)
DONE - TC60: Add a product to a cart with an invalid ID -- (POST400.6)
DONE - TC61: Add a product to a cart with an out-of-range quantity -- (POST400.7)
DONE - TC62: Add a valid and an invalid product to a cart at the same time -- (POST400.8)

** PUT **
DONE - TC63: Updatea cart using PUT request -- (PUT200)
DONE - TC24: Add a new cart using PUT request -- (PUT201)
DONE - TC65: Update a cart with a non-existent user using PUT request -- (PUT400.1)
DONE - TC66: Update a cart with an empty userId using PUT request -- (PUT400.2) 
DONE - TC67: Update a cart with an invalid date using PUT request -- (PUT400.3)
DONE - TC68: Update a cart with an empty date using PUT request -- (PUT400.4)
DONE - TC69: Update a cart with an empty product using PUT request -- (PUT400.5)
DONE - TC70: Update a cart without passing an ID using PUT request -- (PUT404)
DONE - TC71: Update a cart with an out-of-range quantity using PUT request -- (PUT400.6)
DONE - TC72: Update a cart with a valid and an invalid product at the same time using PUT request -- (PUT400.7)

** PATCH **
DONE - TC73: Update a cart using PATCH request -- (PATCH200)
DONE - TC74: Add a new cart using PATCH request --(PATCH201)
DONE - TC75: Update a cart with a non-existent user using PATCH request -- (PATCH400.1)
DONE - TC76: Update a cart with an empty userId using PATCH request -- (PATCH400.2)
DONE - TC77: Update a cart with an invalid date using PATCH request -- (PATCH400.3)
DONE - TC78: Update a cart with an empty date using PATCH request -- (PATCH400.4)
DONE - TC79: Update a cart with an empty product using PATCH request -- (PATCH400.5)
DONE - TC80: Update a cart without passing an ID using PATCH request -- (PATCH404)
DONE - TC81: Update a cart with an out-of-range quantity using PATCH request -- (PATCH400.6)
DONE - TC82: Update a cart with a valid and an invalid product at the same time using PATCH request -- (PATCH400.7)

** DELETE **
DONE - TC83: Delete a cart -- (DELETE204)
DONE - TC84: Delete a non-existent cart -- (DELETE404)

/USERS (36 tests) users_tests.robot

** GET **
TC85: List all users -- (GET200.1)
TC86: List the details of a specific user -- (GET200.2)
TC87: List a non-existent user -- (GET404.1)
TC88: List the details of a limited quantity of users -- (GET200.3)
TC89: List the details of an out of range quantity of users -- (GET404.2)
TC90: List all users sorted (decreasing ID) -- (GET200.4)
TC91: Pass an invalid parameter for "sort" -- (GET404.3)

** POST **
TC92: Create a new user -- (POST201)
TC93: Create a new user with an email that already exists -- (POST400.1)
TC94: Create a new user with a username that already exists -- (POST400.2)
TC95: Create a new user with an empty email -- (POST400.3)
TC96: Create a new user with an empty username -- (POST400.4)
TC97: Create a new user with an empty password -- (POST400.5)
TC98: Create a new user with an empty parameter in 'name' -- (POST400.6)
TC99: Create a new user with an empty parameter in 'address' -- (POST400.7)
TC100: Create a new user with an empty phone -- (POST400.8)

** PUT **
TC101: Update a user using PUT request -- (PUT200)
TC102: Add a user using PUT request -- (PUT201)
TC103: Update a user with an email that already exists using PUT request -- (PUT400.1)
TC104: Update a user with a username that already exists using PUT request -- (PUT400.2)
TC105: Update a user with an empty email using PUT request -- (PUT400.3)
TC106: Update a user with an empty username using PUT request -- (PUT400.4)
TC107: Update a user with an empty password using PUT request -- (PUT400.5)
TC108: Update a user with an empty parameter in 'name' using PUT request -- (PUT400.6)
TC109: Update a user with an empty parameter in 'address' using PUT request -- (PUT400.7)
TC110: Update a user with an empty phone using PUT request -- (PUT400.8)

** PATCH **
TC111: Update a user using PATCH request -- (PATCH200)
TC112: Add a user using PATCH request -- (PATCH201)
TC113: Update a user with an email that already exists using PATCH request -- (PATCH400.1)
TC114: Update a user with a username that already exists using PATCH request -- (PATCH400.2)
TC115: Update a user with an empty email using PATCH request -- (PATCH400.3)
TC116: Update a user with an empty username using PATCH request -- (PATCH400.4)
TC117: Update a user with an empty password using PATCH request -- (PATCH400.5)
TC118: Update a user with an empty parameter in 'name' using PATCH request -- (PATCH400.6)
TC119: Update a user with an empty parameter in 'address' using PATCH request -- (PATCH400.7)
TC120: Update a user with an empty phone using PATCH request -- (PATCH400.8)

** DELETE **
TC121: Delete a user -- (DELETE204)
TC122: Delete a non-existent user -- (DELETE404)

/LOGIN (5 tests) login_tests.robot

** POST **
DONE - TC123: Login a user -- (POST200)
DONE - TC124: Login a user without passing the username -- (POST400.1)
DONE - TC125: Login a user without passing the password -- (POST400.2)
DONE - TC127: Login a invalid username -- (POST401.1)
DONE - TC126: Login a user with the wrong password -- (POST401.2)

** GET **
DONE - test GET request at /login -- (GET404)

** PUT **
DONE - test PUT requst at /login -- (PUT404)

** PATCH ** 
DONE - test PATCH request at /login -- (PATCH404)

** DELETE **
DONE - test DELETE request at /login -- (DELETE404)