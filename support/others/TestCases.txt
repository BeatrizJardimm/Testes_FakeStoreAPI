This project is based on Fake Store API and it contemplates the following test cases.

Document structure:

/ENDPOINT (amount of tests in the endpoint) - file_name.robot

** REQUEST TYPE **
TC00: Test Label -- (Test Case Tag)

---------------------------------------------------------------

/PRODUCTS (40 tests) products_tests.robot

** GET **
TC01: List the details of all products  -- (GET200.1)
TC02: List the details of only one product -- (GET200.2)
TC03: List a non-existent product -- (GET404.1)
TC04: List the details of a limited quantity of products -- (GET200.3)
TC05: List the details of an out of range quantity of products -- (GET404.2) 
TC06: List all products sorted (decreasing ID) -- (GET200.4)
TC07: Pass an invalid parameter for "sort" -- (GET400.1)
TC08: List all categories of products -- (GET200.5)
TC09: List all products of a specific category -- (GET200.6)
TC10: List all products of a non-existent category -- (GET400.2)

** POST **
TC11: Add a new product -- (POST201)
TC12: Add a new product with a title that already exists -- (POST400.1)
TC13: Add a empty product -- (POST400.2)
TC14: Add a product with an empty title -- (POST400.3)
TC15: Add a product with an empty price -- (POST400.4)
TC16: Add a product with an empty description -- (POST400.5)
TC17: Add a product with an empty image -- (POST400.6)
TC18: Add a product with an empty category -- (POST400.7)

** PUT **
TC19: Update a product using PUT request -- (PUT200)
TC20: Add a new product using PUT request -- (PUT201)
TC21: Update a product without passing the id in the endpoint using PUT request -- (PUT404)
TC22: Update a product with a title that already exists using PUT request -- (PUT400.1)
TC23: Update a product to an empty product using PUT request -- (PUT400.2)
TC24: Update a product with an empty title using PUT request -- (PUT400.3)
TC25: Update a product with an empty price using PUT request -- (PUT400.4)
TC26: Update a product with an empty description using PUT request -- (PUT400.5)
TC27: Update a product with an empty image using PUT request -- (PUT400.6)
TC28: Update a product with an empty category using PUT request -- (PUT400.7)

** PATCH **
TC29: Update a product using PATCH request -- (PATCH200)
TC30: Add a new product using PATCH request -- (PATCH201)
TC31: Update a product without passing the id in the endpoint using PATCH request -- (PATCH404)
TC32: Update a product with a title that already exists using PATCH request -- (PATCH400.1)
TC33: Update a product to an empty product using PATCH request -- (PATCH400.2)
TC34: Update a product with an empty title using PATCH request -- (PATCH400.3)
TC35: Update a product with an empty price using PATCH request -- (PATCH400.4)
TC36: Update a product with an empty description using PATCH request -- (PATCH400.5)
TC37: Update a product with an empty image using PATCH request -- (PATCH400.6)
TC38: Update a product with an empty category using PATCH request -- (PATCH400.7)

** DELETE **
TC39: Delete a product -- (DELETE204)
TC40: Delete a non-existent product -- (DELETE404)

/CART (47 tests) carts_tests.robot

** GET **
TC41: List the details of all carts -- (GET200.1)
TC42: List the details of a specific cart -- (GET200.2)
TC43: List a non-existent cart -- (GET404.1)
TC44: List the details of a limited quantity of carts -- (GET200.3)
TC45: List the details of an out of range quantity of carts -- (GET404.2)
TC46: List all carts sorted (decreasing ID) -- (GET200.4)
TC47: Pass an invalid parameter for "sort" -- (GET400.1)
TC48: List all carts created in a certain date range -- (GET200.5)
TC49: List all carts created since a certain date -- (GET200.6)
TC50: List all cart created until a certain date -- (GET200.7)
TC51: List all carts created in a future date -- (GET400.2)
TC52: List all carts created in a very old date -- (GET400.3)
TC53: List the carts of a user that has carts -- (GET200.6)
TC54: List the carts of a user that doesn't have carts -- (GET404.3)
TC55: List the carts of a non-existent user -- (GET404.4)

** POST **
TC56: Add a product to a cart -- (POST201)
TC57: Add a product to a cart of a non-existent user -- (POST404.1)
TC58: Post a cart to a user that already has a cart --
TC59: Add a product to a cart with an empty userId -- (POST400.2)
TC60: Add a product to a cart with an invalid date -- (POST400.3)
TC61: Add a product to a cart with an empty date -- (POST400.4)
TC62: Add an empty product to a cart -- (POST400.5)
TC63: Add a product to a cart with an invalid ID -- (POST400.6)
TC64: Add a product to a cart with an out-of-range quantity -- (POST400.7)
TC65: Add a valid and an invalid product to a cart at the same time -- (POST400.8)

** PUT **
TC66: Updatea cart using PUT request -- (PUT200)
TC67: Add a new cart using PUT request -- (PUT201)
TC68: Update a cart without passing an ID using PUT request -- (PUT404)
TC69: Update a cart with a non-existent user using PUT request -- (PUT400.1)
TC70: Update a cart with an empty userId using PUT request -- (PUT400.2) 
TC71: Update a cart with an invalid date using PUT request -- (PUT400.3)
TC72: Update a cart with an empty date using PUT request -- (PUT400.4)
TC73: Update a cart with an empty product using PUT request -- (PUT400.5)
TC74: Update a cart with an out-of-range quantity using PUT request -- (PUT400.6)
TC75: Update a cart with a valid and an invalid product at the same time using PUT request -- (PUT400.7)

** PATCH **
TC76: Update a cart using PATCH request -- (PATCH200)
TC77: Add a new cart using PATCH request --(PATCH201)
TC78: Update a cart without passing an ID using PATCH request -- (PATCH404)
TC79: Update a cart with a non-existent user using PATCH request -- (PATCH400.1)
TC80: Update a cart with an empty userId using PATCH request -- (PATCH400.2)
TC81: Update a cart with an invalid date using PATCH request -- (PATCH400.3)
TC82: Update a cart with an empty date using PATCH request -- (PATCH400.4)
TC83: Update a cart with an empty product using PATCH request -- (PATCH400.5)
TC84: Update a cart with an out-of-range quantity using PATCH request -- (PATCH400.6)
TC85: Update a cart with a valid and an invalid product at the same time using PATCH request -- (PATCH400.7)

** DELETE **
TC86: Delete a cart -- (DELETE204)
TC87: Delete a non-existent cart -- (DELETE404)

/USERS (40 tests) users_tests.robot

** GET **
TC88: List all users -- (GET200.1)
TC89: List the details of a specific user -- (GET200.2)
TC90: List a non-existent user -- (GET404.1)
TC91: List the details of a limited quantity of users -- (GET200.3)
TC92: List the details of an out of range quantity of users -- (GET404.2)
TC93: List all users sorted (decreasing ID) -- (GET200.4)
TC94: Pass an invalid parameter for "sort" -- (GET404.3)

** POST **
TC95: Create a new user -- (POST201)
TC96: Create a new user with an email that already exists -- (POST400.1)
TC97: Create a new user with a username that already exists -- (POST400.2)
TC98: Create a new user with an empty email -- (POST400.3)
TC99: Create a new user with an empty username -- (POST400.4)
TC100: Create a new user with an empty password -- (POST400.5)
TC101: Create a new user with an empty parameter in 'name' -- (POST400.6)
TC102: Create a new user with an empty parameter in 'address' -- (POST400.7)
TC103: Create a new user with an empty phone -- (POST400.8)

** PUT **
TC104: Update a user using PUT request -- (PUT200)
TC105: Add a user using PUT request -- (PUT201)
TC106: Update a user without passing an ID using PUT request -- (PUT404)
TC107: Update a user with an email that already exists using PUT request -- (PUT400.1)
TC108: Update a user with a username that already exists using PUT request -- (PUT400.2)
TC109: Update a user with an empty email using PUT request -- (PUT400.3)
TC110: Update a user with an empty username using PUT request -- (PUT400.4)
TC111: Update a user with an empty password using PUT request -- (PUT400.5)
TC112: Update a user with an empty parameter in 'name' using PUT request -- (PUT400.6)
TC113: Update a user with an empty parameter in 'address' using PUT request -- (PUT400.7)
TC114: Update a user with an empty phone using PUT request -- (PUT400.8)

** PATCH **
TC115: Update a user using PATCH request -- (PATCH200)
TC116: Add a user using PATCH request -- (PATCH201)
TC117: Update a user without passing an ID using PATCH request -- (PATCH404)
TC118: Update a user with an email that already exists using PATCH request -- (PATCH400.1)
TC119: Update a user with a username that already exists using PATCH request -- (PATCH400.2)
TC120: Update a user with an empty email using PATCH request -- (PATCH400.3)
TC121: Update a user with an empty username using PATCH request -- (PATCH400.4)
TC122: Update a user with an empty password using PATCH request -- (PATCH400.5)
TC123: Update a user with an empty parameter in 'name' using PATCH request -- (PATCH400.6)
TC124: Update a user with an empty parameter in 'address' using PATCH request -- (PATCH400.7)
TC125: Update a user with an empty phone using PATCH request -- (PATCH400.8)

** DELETE **
TC126: Delete a user -- (DELETE204)
TC127: Delete a non-existent user -- (DELETE404)

/LOGIN (9 tests) login_tests.robot

** POST **
TC128: Login a user -- (POST200)
TC129: Login a user without passing the username -- (POST400.1)
TC130: Login a user without passing the password -- (POST400.2)
TC131: Login a invalid username -- (POST401.1)
TC132: Login a user with the wrong password -- (POST401.2)

** GET **
TC133: Test GET request at /login -- (GET404)

** PUT **
TC134: Test PUT request at /login -- (PUT404)

** PATCH ** 
TC135: Test PATCH request at /login -- (PATCH404)

** DELETE **
TC136: Test DELETE request at /login -- (DELETE404)